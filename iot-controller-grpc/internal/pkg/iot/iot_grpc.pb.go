// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: iot.proto

package iot

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IotServiceClient is the client API for IotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IotServiceClient interface {
	ProcessIot(ctx context.Context, in *IotRequest, opts ...grpc.CallOption) (*IotResponse, error)
}

type iotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIotServiceClient(cc grpc.ClientConnInterface) IotServiceClient {
	return &iotServiceClient{cc}
}

func (c *iotServiceClient) ProcessIot(ctx context.Context, in *IotRequest, opts ...grpc.CallOption) (*IotResponse, error) {
	out := new(IotResponse)
	err := c.cc.Invoke(ctx, "/iot.IotService/ProcessIot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IotServiceServer is the server API for IotService service.
// All implementations must embed UnimplementedIotServiceServer
// for forward compatibility
type IotServiceServer interface {
	ProcessIot(context.Context, *IotRequest) (*IotResponse, error)
	mustEmbedUnimplementedIotServiceServer()
}

// UnimplementedIotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIotServiceServer struct {
}

func (UnimplementedIotServiceServer) ProcessIot(context.Context, *IotRequest) (*IotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessIot not implemented")
}
func (UnimplementedIotServiceServer) mustEmbedUnimplementedIotServiceServer() {}

// UnsafeIotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IotServiceServer will
// result in compilation errors.
type UnsafeIotServiceServer interface {
	mustEmbedUnimplementedIotServiceServer()
}

func RegisterIotServiceServer(s grpc.ServiceRegistrar, srv IotServiceServer) {
	s.RegisterService(&IotService_ServiceDesc, srv)
}

func _IotService_ProcessIot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IotServiceServer).ProcessIot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot.IotService/ProcessIot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IotServiceServer).ProcessIot(ctx, req.(*IotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IotService_ServiceDesc is the grpc.ServiceDesc for IotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iot.IotService",
	HandlerType: (*IotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessIot",
			Handler:    _IotService_ProcessIot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iot.proto",
}
